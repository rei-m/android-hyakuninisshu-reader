import dependencies.Versions
import dependencies.Packages
import dependencies.Deps
import dependencies.Projects

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    if ((new File('./signingConfigs/releaseConfig.gradle')).exists()) {
        apply from: '../signingConfigs/releaseConfig.gradle', to: android
    } else {
        signingConfigs {
            releaseConfig
        }
    }

    compileSdkVersion Versions.compileSdkVersion

    defaultConfig {
        applicationId Packages.applicationId
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix Packages.applicationIdSuffix
            versionNameSuffix Packages.versionNameSuffix
        }
        release {
            signingConfig signingConfigs.releaseConfig
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        dataBinding = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation Deps.Kotlin.kotlinStdlibJdk7

    implementation project(Projects.domain)

    implementation project(Projects.Infrastructure.database)
    implementation project(Projects.Infrastructure.storage)

    implementation project(Projects.Feature.corecomponent)
    implementation project(Projects.Feature.splash)
    implementation project(Projects.Feature.trainingmenu)
    implementation project(Projects.Feature.trainingstarter)
    implementation project(Projects.Feature.trainingresult)
    implementation project(Projects.Feature.exammenu)
    implementation project(Projects.Feature.examstarter)
    implementation project(Projects.Feature.examresult)
    implementation project(Projects.Feature.examhistory)
    implementation project(Projects.Feature.question)
    implementation project(Projects.Feature.material)
    implementation project(Projects.Feature.support)

    implementation Deps.Dagger.hiltAndroid
    kapt Deps.Dagger.hiltAndroidCompiler
    androidTestImplementation Deps.Dagger.hiltAndroidTesting
    kaptAndroidTest Deps.Dagger.hiltAndroidCompiler

    implementation Deps.androidRate

    debugImplementation Deps.leakCanary
}

task addAppLicenseTask {
    final String UTF_8 = "UTF-8"
    final byte[] LINE_SEPARATOR = System.getProperty("line.separator").getBytes(UTF_8)

    mustRunAfter tasks.findByName('generateLicenses')

    doLast {
        def dependencyOutput = new File(project.buildDir, "generated/third_party_licenses")

        def resourceOutput = new File(dependencyOutput, "/res")
        def outputDir = new File(resourceOutput, "/raw")


        def licensesFile = new File(outputDir, "third_party_licenses")
        def licensesMetadataFile = new File(outputDir, "third_party_license_metadata")

        def start = licensesFile.length()

        def fontLicenseContent = """
ライセンスはIPAフォントに準拠します。

http://ipafont.ipa.go.jp/ipa_font_license_v1.html
"""
        licensesFile << fontLicenseContent
        licensesFile << (LINE_SEPARATOR)

        licensesMetadataFile << ("${start}:${fontLicenseContent.getBytes("UTF-8").size()} はんなり明朝")
        licensesMetadataFile << (LINE_SEPARATOR)

        start = licensesFile.length()

        def soundsLicenseContent = """
アプリ内の百人一首の音声データは著作権によって保護されます。著作権は Rei Matsushita に帰属します。
"""
        licensesFile << soundsLicenseContent
        licensesFile << (LINE_SEPARATOR)

        licensesMetadataFile << ("${start}:${soundsLicenseContent.getBytes("UTF-8").size()} 百人一首の音声データ")
        licensesMetadataFile << (LINE_SEPARATOR)
    }
}

// preBuild前にライセンス情報を追加する
tasks.findByPath(':app:preBuild').dependsOn addAppLicenseTask
