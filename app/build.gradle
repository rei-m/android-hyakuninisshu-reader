import dependencies.Versions

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    if ((new File('./signingConfigs/releaseConfig.gradle')).exists()) {
        apply from: '../signingConfigs/releaseConfig.gradle', to: android
    } else {
        signingConfigs {
            releaseConfig
        }
    }

    compileSdkVersion Versions.compileSdkVersion

    defaultConfig {
        applicationId "net.hyakuninanki.reader"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "d"
        }
        release {
            signingConfig signingConfigs.releaseConfig
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        dataBinding = true
    }
}

apply from: rootProject.file('gradle/dependencies/dagger.gradle'), to: dependencies

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation project(':domain')

    implementation project(':infrastructure:database')
    implementation project(':infrastructure:storage')

    implementation project(':feature:corecomponent')
    implementation project(':feature:splash')
    implementation project(':feature:trainingmenu')
    implementation project(':feature:trainingstarter')
    implementation project(':feature:trainingresult')
    implementation project(':feature:exammenu')
    implementation project(':feature:examstarter')
    implementation project(':feature:examresult')
    implementation project(':feature:examhistory')
    implementation project(':feature:question')
    implementation project(':feature:material')
    implementation project(':feature:support')

    implementation 'com.github.hotchemi:android-rate:1.0.1'

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task addAppLicenseTask {
    final String UTF_8 = "UTF-8"
    final byte[] LINE_SEPARATOR = System.getProperty("line.separator").getBytes(UTF_8)

    mustRunAfter tasks.findByName('generateLicenses')

    doLast {
        def dependencyOutput = new File(project.buildDir, "generated/third_party_licenses")

        def resourceOutput = new File(dependencyOutput, "/res")
        def outputDir = new File(resourceOutput, "/raw")


        def licensesFile = new File(outputDir, "third_party_licenses")
        def licensesMetadataFile = new File(outputDir, "third_party_license_metadata")

        def start = licensesFile.length()

        def fontLicenseContent = """
ライセンスはIPAフォントに準拠します。

http://ipafont.ipa.go.jp/ipa_font_license_v1.html
"""
        licensesFile << fontLicenseContent
        licensesFile << (LINE_SEPARATOR)

        licensesMetadataFile << ("${start}:${fontLicenseContent.getBytes("UTF-8").size()} はんなり明朝")
        licensesMetadataFile << (LINE_SEPARATOR)

        start = licensesFile.length()

        def soundsLicenseContent = """
アプリ内の百人一首の音声データは著作権によって保護されます。著作権は Rei Matsushita に帰属します。
"""
        licensesFile << soundsLicenseContent
        licensesFile << (LINE_SEPARATOR)

        licensesMetadataFile << ("${start}:${soundsLicenseContent.getBytes("UTF-8").size()} 百人一首の音声データ")
        licensesMetadataFile << (LINE_SEPARATOR)
    }
}

// preBuild前にライセンス情報を追加する
tasks.findByPath(':app:preBuild').dependsOn addAppLicenseTask
